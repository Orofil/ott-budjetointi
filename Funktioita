/* Tilitapahtuman vienti tietokantaan (tapahtuma transactions tauluun,
tilinumerot accounts tauluun) */

CREATE OR REPLACE FUNCTION add_transaction(
    p_date DATE,
    p_reference_number NUMERIC,
    p_description TEXT,
    p_amount NUMERIC,
    p_account INTEGER,
    p_name TEXT,
    p_category_id INTEGER
) RETURNS INTEGER AS $$
DECLARE
    new_transaction_id INTEGER;
BEGIN
    -- Lisätään tapahtuma
    IF p_amount < 0
    THEN
      INSERT INTO public.expense_transactions (
          date, reference_number, description, amount, 
          account_from, account_to, category_id
      )
      VALUES (
          p_date, p_reference_number, p_description, ABS(p_amount),
          p_account, p_name, p_category_id
      )
      RETURNING id INTO new_transaction_id;
    ELSE
      INSERT INTO public.income_transactions (
          date, reference_number, description, amount, 
          account_from, account_to, category_id
      )
      VALUES (
          p_date, p_reference_number, p_description, ABS(p_amount),
          p_name, p_account, p_category_id
      )
      RETURNING id INTO new_transaction_id;
    END IF;

    -- Palautetaan uuden tapahtuman ID
    RETURN new_transaction_id;
END;
$$ LANGUAGE plpgsql;


-- Positiivinen summa
SELECT add_transaction(
    '2024-03-06',
    '9876543210',
    'Palkka',
    1500.00,  -- Positiivinen summa
    'FI123456789',  -- Tilinumero (account_from)
    'FI987654321',  -- Tilinumero (account_to)
    1  -- Kategoria ID (tämä voi olla income_category taulusta, ei tarvitse olla käyttäjän oma)
);

-- Negatiivinen summa
SELECT add_transaction(
    '2024-03-06',
    '9876543211',
    'Ruokakauppa',
    -30.00,  -- Negatiivinen summa
    'FI123456789',  -- Tilinumero (account_from)
    'FI987654321',  -- Tilinumero (account_to)
    2  -- Kategoria ID (tämä voi olla expense_category taulusta, ei tarvitse olla käyttäjän oma)
);


/* Tapahtuman muokkaaminen */

CREATE OR REPLACE FUNCTION update_transaction(
    p_id INTEGER,
    p_date DATE,
    p_reference_number NUMERIC,
    p_description TEXT,
    p_amount NUMERIC,
    p_account INTEGER,
    p_name TEXT,
    p_category_id INTEGER
) RETURNS INTEGER AS $$
DECLARE
    transaction_id INTEGER;
BEGIN
    IF p_amount < 0
    THEN
      UPDATE public.expense_transactions SET 
          date = p_date,
          reference_number = p_reference_number,
          description = p_description,
          amount = p_amount, 
          account_from = p_account,
          account_to = p_name,
          category_id = p_category_id
      WHERE id = p_id
      RETURNING id INTO transaction_id;
    ELSE
      UPDATE public.expense_transactions SET 
          date = p_date,
          reference_number = p_reference_number,
          description = p_description,
          amount = p_amount, 
          account_from = p_name,
          account_to = p_account,
          category_id = p_category_id
      WHERE id = p_id
      RETURNING id INTO transaction_id;
    END IF;

    -- Palautetaan tapahtuman ID
    RETURN transaction_id;
END;
$$ LANGUAGE plpgsql;


/* Uuden kategorian lisääminen*/

CREATE OR REPLACE FUNCTION add_user_category(
    p_user_id UUID,
    p_category_name TEXT,
    p_category_type INTEGER  -- 0 = expense, 1 = income
) RETURNS VOID AS $$
BEGIN
    IF p_category_type = 0 THEN
        -- Lisää uusi kategoria expense_categories tauluun
        INSERT INTO public.expense_categories (user_id, category_name)
        VALUES (p_user_id, p_category_name);
    ELSIF p_category_type = 1 THEN
        -- Lisää uusi kategoria income_categories tauluun
        INSERT INTO public.income_categories (user_id, category_name)
        VALUES (p_user_id, p_category_name);
    END IF;
END;
$$ LANGUAGE plpgsql;


SELECT add_user_category(
    '570f6c1f-0061-4c44-8770-b7ad15cc29a1',
    'Uusi tulo kategoria',
    1  -- Income
);

SELECT add_user_category(
    '570f6c1f-0061-4c44-8770-b7ad15cc29a1',
    'Uusi meno kategoria',
    2  -- Expense
);


/* Uuden tilin lisääminen */

CREATE OR REPLACE FUNCTION add_account(
    p_user_id UUID,
    p_account_number TEXT,
    p_account_name TEXT
) RETURNS INTEGER AS $$
DECLARE
    new_id INTEGER;
BEGIN
    -- Lisätään tili
    INSERT INTO public.accounts (
        user_id, account_number, account_name
    )
    VALUES (
        p_user_id, p_account_number, p_account_name
    )
    RETURNING id INTO new_id;

    -- Palautetaan uuden tilin ID
    RETURN new_id;
END;
$$ LANGUAGE plpgsql;


/* Uuden budjetin lisääminen */

CREATE OR REPLACE FUNCTION add_budget(
    p_user_id UUID,
    p_start_date DATE,
    p_end_date DATE,
    p_budget_name TEXT,
    p_amount NUMERIC,
    p_repeating TEXT
) RETURNS INTEGER AS $$
DECLARE
    new_budget_id INTEGER;
BEGIN
    -- Budjetilla on oltava joko alku- ja loppupäivät tai toistoaika
    IF p_repeating IS NULL AND (p_start_date IS NULL OR p_end_date IS NULL)
    THEN
        RETURN NULL;
    END IF;
    
    -- Lisätään budjetti
    INSERT INTO public.budgets (
        user_id, start_date, end_date, budget_name, amount, repeating
    )
    VALUES (
        p_user_id, p_start_date, p_end_date, p_budget_name, p_amount, p_repeating
    )
    RETURNING id INTO new_budget_id;

    -- Palautetaan uuden budjetin ID
    RETURN new_budget_id;
END;
$$ LANGUAGE plpgsql;


/* Budjetin haku */

CREATE OR REPLACE FUNCTION get_budgets(p_user_id UUID)
RETURNS TABLE (
    id BIGINT,
    user_id UUID,
    start_date DATE,
    end_date DATE,
    created_at TIMESTAMP,
    budget_name TEXT,
    amount NUMERIC,
    repeating TEXT,
    categories BIGINT[],
    accounts BIGINT[]
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        b.*,
        array_agg(DISTINCT bc.budget_category_id) AS categories,
        array_agg(DISTINCT ba.account_id) AS accounts
    FROM budgets b
    LEFT JOIN budgets_categories bc ON b.id = bc.budget_id
    LEFT JOIN budgets_accounts ba ON b.id = ba.budget_id
    WHERE b.user_id = p_user_id
    GROUP BY b.id;
END;
$$ LANGUAGE plpgsql;

SELECT get_budgets('f6b53cb8-4c50-4a74-a2a9-b0f4c6653207');


/* Budjettien tapahtumien lisääminen */

-- Tapahtumien lisäys
CREATE OR REPLACE FUNCTION add_budget_expense_transaction()
RETURNS TRIGGER AS $$
BEGIN
    -- Lisätään ne tilitapahtumat jotka kuuluvat budjetin tileihin ja kategorioihin
    INSERT INTO budgets_expense_transactions (budget_id, expense_transaction_id)
    SELECT b.id, NEW.id
    FROM budgets b
    JOIN budgets_accounts ba ON ba.budget_id = b.id
    JOIN budgets_categories bc ON bc.budget_id = b.id
    WHERE ba.account_id = NEW.account_from
      AND bc.budget_category_id = NEW.category_id
      AND (b.repeating IS NOT NULL OR NEW.date BETWEEN b.start_date AND b.end_date);
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION add_budget_income_transaction()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO budgets_income_transactions (budget_id, income_transaction_id)
    SELECT b.id, NEW.id
    FROM budgets b
    JOIN budgets_accounts ba ON ba.budget_id = b.id
    JOIN budgets_categories bc ON bc.budget_id = b.id
    WHERE ba.account_id = NEW.account_to
      AND bc.budget_category_id = NEW.category_id
      AND (b.repeating IS NOT NULL OR NEW.date BETWEEN b.start_date AND b.end_date);
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- Budjettien muokkaus
CREATE OR REPLACE FUNCTION populate_budget_transactions(p_budget_id INT)
RETURNS VOID AS $$
BEGIN
    INSERT INTO budgets_expense_transactions (budget_id, expense_transaction_id)
    SELECT b.id, et.id
    FROM expense_transactions et
    JOIN budgets_accounts ba ON ba.account_id = et.account_from
    JOIN budgets_categories bc ON bc.budget_category_id = et.category_id
    JOIN budgets b ON b.id = ba.budget_id AND b.id = bc.budget_id
    WHERE b.id = p_budget_id
      AND (b.repeating IS NOT NULL OR et.date BETWEEN b.start_date AND b.end_date)
    ON CONFLICT DO NOTHING; -- Ei kaksoiskappaleita

    INSERT INTO budgets_income_transactions (budget_id, income_transaction_id)
    SELECT b.id, it.id
    FROM income_transactions it
    JOIN budgets_accounts ba ON ba.account_id = it.account_to
    JOIN budgets_categories bc ON bc.budget_category_id = it.category_id
    JOIN budgets b ON b.id = ba.budget_id AND b.id = bc.budget_id
    WHERE b.id = p_budget_id
      AND (b.repeating IS NOT NULL OR it.date BETWEEN b.start_date AND b.end_date)
    ON CONFLICT DO NOTHING;
END;
$$ LANGUAGE plpgsql;


-- Tapahtumien muokkaus
CREATE OR REPLACE FUNCTION update_budget_expense_transaction()
RETURNS TRIGGER AS $$
BEGIN
    -- Poista vanhoista budjeteista
    DELETE FROM budgets_expense_transactions bet
    WHERE bet.expense_transaction_id = OLD.id
      AND NOT EXISTS (
          SELECT 1 FROM budgets b
          JOIN budgets_accounts ba ON ba.budget_id = b.id
          JOIN budgets_categories bc ON bc.budget_id = b.id
          WHERE ba.account_id = NEW.account_from
            AND bc.budget_category_id = NEW.category_id
            (b.repeating IS NOT NULL OR NEW.date BETWEEN b.start_date AND b.end_date)
            AND b.id = bet.budget_id
      );

    -- Lisää uusiin budjetteihin
    INSERT INTO budgets_expense_transactions (budget_id, expense_transaction_id)
    SELECT b.id, NEW.id
    FROM budgets b
    JOIN budgets_accounts ba ON ba.budget_id = b.id
    JOIN budgets_categories bc ON bc.budget_id = b.id
    WHERE ba.account_id = NEW.account_from
      AND bc.budget_category_id = NEW.category_id
      (b.repeating IS NOT NULL OR NEW.date BETWEEN b.start_date AND b.end_date)
    ON CONFLICT DO NOTHING;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_budget_income_transaction()
RETURNS TRIGGER AS $$
BEGIN
    -- Poista edellisistä budjeteista
    DELETE FROM budgets_income_transactions bit
    WHERE bit.income_transaction_id = OLD.id
      AND NOT EXISTS (
          SELECT 1 FROM budgets b
          JOIN budgets_accounts ba ON ba.budget_id = b.id
          JOIN budgets_categories bc ON bc.budget_id = b.id
          WHERE ba.account_id = NEW.account_to
            AND bc.budget_category_id = NEW.category_id
            (b.repeating IS NOT NULL OR NEW.date BETWEEN b.start_date AND b.end_date)
            AND b.id = bit.budget_id
      );

    -- Lisää uusiin budjetteihin
    INSERT INTO budgets_income_transactions (budget_id, income_transaction_id)
    SELECT b.id, NEW.id
    FROM budgets b
    JOIN budgets_accounts ba ON ba.budget_id = b.id
    JOIN budgets_categories bc ON bc.budget_id = b.id
    WHERE ba.account_id = NEW.account_to
      AND bc.budget_category_id = NEW.category_id
      (b.repeating IS NOT NULL OR NEW.date BETWEEN b.start_date AND b.end_date)
    ON CONFLICT DO NOTHING;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;



----- Triggerit

-- Tapahtumien luomiset
CREATE TRIGGER budget_expense_transaction_trigger
AFTER INSERT ON expense_transactions
FOR EACH ROW
EXECUTE FUNCTION add_budget_expense_transaction();

CREATE TRIGGER budget_income_transaction_trigger
AFTER INSERT ON income_transactions
FOR EACH ROW
EXECUTE FUNCTION add_budget_income_transaction();


-- Tapahtumien muokkaukset
CREATE TRIGGER expense_transaction_update_trigger
AFTER UPDATE ON expense_transactions
FOR EACH ROW
EXECUTE FUNCTION update_budget_expense_transaction();

CREATE TRIGGER income_transaction_update_trigger
AFTER UPDATE ON income_transactions
FOR EACH ROW
EXECUTE FUNCTION update_budget_income_transaction();


/* Budjetin tapahtumien haku */

CREATE OR REPLACE FUNCTION get_budget_transactions(
  p_budget_id INT,
  p_start_date DATE,
  p_end_date DATE
)
RETURNS TABLE (
  id BIGINT,
  type INTEGER,
  date DATE,
  reference_number NUMERIC,
  description TEXT,
  amount NUMERIC,
  other_account TEXT,
  own_account BIGINT,
  category_id BIGINT,
  user_id UUID
) AS $$
BEGIN
    RETURN query
    SELECT * FROM all_transactions AS t
    WHERE ((t.type = 0 AND t.id IN ( -- Haetaan budjetin tapahtumat
      SELECT e.expense_transaction_id FROM budgets_expense_transactions AS e
      WHERE e.budget_id = p_budget_id
    )) OR (t.type = 1 AND t.id IN (
      SELECT i.income_transaction_id FROM budgets_income_transactions AS i
      WHERE i.budget_id = p_budget_id
    ))) AND ( -- Rajataan päivämäärät jos ne on annettu
      (p_start_date IS NULL OR p_end_date IS NULL) OR
      (t.date BETWEEN p_start_date AND p_end_date)
    );
END;
$$ LANGUAGE plpgsql;

-- Esimerkki
SELECT get_budget_transactions(14, '2025-01-01', '2025-03-01');
SELECT get_budget_transactions(15, '2025-03-01', '2025-03-07');